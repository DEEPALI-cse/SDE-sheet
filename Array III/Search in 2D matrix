//leetcode
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.size()==0){
                return false;
            }
        int n= matrix.size();
        int m= matrix[0].size();

        int low=0, high= n*m -1;
       
        while(low<= high){
             int mid= low+ (high-low)/2;
            if(matrix[mid/m][mid%m]== target){
                return true;
            }
            else if(matrix[mid/m][mid%m] < target){
                low= mid+1;
            }
            else{
                high= mid-1;
            }
        }
        return false;
    }
};
//gfg
//User function template for C++
class Solution{
public:	
	int matSearch (vector <vector <int>> &mat, int N, int M, int X)
	{
	    // your code here
	    int i = 0, j= M-1;
	    while(i>=0 && i<N && j>=0 && j< M){
	        if(X == mat[i][j]){
	            return 1;
	        }   
	        else if( X < mat[i][j]){
	            j--;
	        }
	        else{
	            i++;
	        }
	    }
	    return 0;
	}
};
