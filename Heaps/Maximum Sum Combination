
// } Driver Code Ends
class Solution {
  public:
    vector<int> maxCombinations(int n, int K, vector<int> &A, vector<int> &B) {
        sort(A.begin(), A.end());
        sort(B.begin(), B.end());
        
        priority_queue<pair<int, pair<int, int>>> maxhp;
        set<pair<int, int>> st;
        
        maxhp.push({A[n-1]+ B[n-1], {n-1, n-1}});
        st.insert({n-1, n-1});
        vector<int> ans;
        
        
        while(K>0){
            pair<int, pair<int, int>> top = maxhp.top();
            maxhp.pop();
            
            ans.push_back(top.first);
            
            int x = top.second.first;
            int y = top.second.second;
            
            if(st.find({x-1, y})==st.end()){
                maxhp.push({A[x-1]+ B[y], {x-1, y}});
                st.insert({x-1, y});
            }
            if(st.find({x, y-1})==st.end()){
                maxhp.push({A[x]+B[y-1], {x, y-1}});
                st.insert({x, y-1});
            }
            K--;
        }
        return ans;
    }
};
